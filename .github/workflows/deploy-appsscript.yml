name: Deploy to Google Apps Script

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install clasp
      run: npm install -g @google/clasp

    - name: Verify required secrets
      run: |
        echo "üîç Verifying secrets are present..."
        if [[ -z "${{ secrets.ACCESS_TOKEN }}" ]]; then echo "‚ùå ACCESS_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.REFRESH_TOKEN }}" ]]; then echo "‚ùå REFRESH_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_ID }}" ]]; then echo "‚ùå CLIENT_ID missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_SECRET }}" ]]; then echo "‚ùå CLIENT_SECRET missing"; exit 1; fi
        if [[ -z "${{ secrets.SCRIPT_ID }}" ]]; then echo "‚ùå SCRIPT_ID missing"; exit 1; fi
        echo "‚úÖ All required secrets are configured"

    - name: Create .clasprc.json with proper expiry date
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        ID_TOKEN: ${{ secrets.ID_TOKEN }}
      run: |
        echo "üîë Creating authentication file..."

        # Calculate expiry date (current time + 1 hour in milliseconds)
        EXPIRY_DATE=$(($(date +%s) * 1000 + 3600000))
        echo "Calculated expiry date: $EXPIRY_DATE"

        # Use Python to create the JSON file safely with proper environment variable access
        EXPIRY_DATE=$EXPIRY_DATE python3 << 'EOF'
        import json
        import os

        # Get expiry date from environment
        expiry_date = int(os.environ.get('EXPIRY_DATE', '0'))
        print(f"Using expiry date: {expiry_date}")

        # Verify all required environment variables are present
        required_vars = ['CLIENT_ID', 'CLIENT_SECRET', 'REFRESH_TOKEN', 'ACCESS_TOKEN']
        for var in required_vars:
            if not os.environ.get(var):
                print(f"‚ùå Missing required environment variable: {var}")
                exit(1)

        print("‚úÖ All required environment variables present")

        # Create the authentication structure using the exact clasp format
        # Based on clasp documentation and working local format
        auth_data = {
            "token": {
                "access_token": os.environ.get('ACCESS_TOKEN', ''),
                "refresh_token": os.environ.get('REFRESH_TOKEN', ''),
                "scope": "https://www.googleapis.com/auth/script.projects",
                "token_type": "Bearer",
                "id_token": os.environ.get('ID_TOKEN', ''),
                "expiry_date": expiry_date
            },
            "oauth2ClientSettings": {
                "clientId": os.environ.get('CLIENT_ID', ''),
                "clientSecret": os.environ.get('CLIENT_SECRET', ''),
                "redirectUri": "http://localhost"
            },
            "isLocalCreds": False
        }

        # Write to the authentication file
        auth_file_path = os.path.expanduser('~/.clasprc.json')
        with open(auth_file_path, 'w') as f:
            json.dump(auth_data, f, indent=2)

        print(f"‚úÖ Authentication file created at: {auth_file_path}")

        # Verify file was created and is readable
        with open(auth_file_path, 'r') as f:
            test_data = json.load(f)
            token_fields = len(test_data.get('token', {}))
            oauth_fields = len(test_data.get('oauth2ClientSettings', {}))
            print(f"‚úÖ File verification: token has {token_fields} fields, oauth has {oauth_fields} fields")
        EOF

    - name: Alternative - Copy your working local .clasprc.json format exactly
      if: failure()
      run: |
        echo "üîÑ Trying alternative approach - creating exact copy of working format..."

        # Create file with exact same structure as your working local file
        cat > ~/.clasprc.json << EOF
        {
          "tokens": {
            "default": {
              "client_id": "${{ secrets.CLIENT_ID }}",
              "client_secret": "${{ secrets.CLIENT_SECRET }}",
              "type": "authorized_user",
              "refresh_token": "${{ secrets.REFRESH_TOKEN }}",
              "access_token": "${{ secrets.ACCESS_TOKEN }}",
              "token_type": "Bearer",
              "expiry_date": 1758678121909,
              "id_token": "${{ secrets.ID_TOKEN }}"
            }
          }
        }
        EOF

    - name: Debug authentication file
      run: |
        echo "üîç Authentication file verification:"
        echo "File exists: $(test -f ~/.clasprc.json && echo 'YES' || echo 'NO')"
        echo "File size: $(wc -c < ~/.clasprc.json) bytes"

        # Show the structure (masking secrets)
        python3 << 'EOF'
        import json
        try:
            with open('/home/runner/.clasprc.json', 'r') as f:
                data = json.load(f)

            # Check for required fields in the correct structure
            token_data = data.get('token', {})
            oauth_settings = data.get('oauth2ClientSettings', {})

            if token_data and oauth_settings:
                print(f"‚úÖ Has access_token: {'access_token' in token_data}")
                print(f"‚úÖ Has refresh_token: {'refresh_token' in token_data}")
                print(f"‚úÖ Has expiry_date: {'expiry_date' in token_data}")
                print(f"   Expiry date value: {token_data.get('expiry_date', 'MISSING')}")
                print(f"‚úÖ Access token length: {len(token_data.get('access_token', ''))}")
                print(f"‚úÖ Has clientId: {'clientId' in oauth_settings}")
                print(f"‚úÖ Has clientSecret: {'clientSecret' in oauth_settings}")
            else:
                print("‚ùå Missing token or oauth2ClientSettings structure")
        except Exception as e:
            print(f"‚ùå Error reading file: {e}")
        EOF

    - name: Create .clasp.json with Script ID
      run: |
        echo "üìù Creating project configuration..."
        echo "{\"scriptId\": \"${{ secrets.SCRIPT_ID }}\", \"rootDir\": \"./src\", \"fileExtension\": \"gs\"}" > .clasp.json
        echo "‚úÖ Project configuration created"
        cat .clasp.json

    - name: Try token refresh and clasp setup
      run: |
        echo "üîÑ Attempting to refresh authentication..."

        # Check clasp installation and version
        clasp --version

        # Try to refresh the access token using the refresh token
        echo "Attempting to get fresh access token..."

        # Use curl to refresh the token manually first
        REFRESH_RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.CLIENT_ID }}" \
          -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
          -d "refresh_token=${{ secrets.REFRESH_TOKEN }}" \
          -d "grant_type=refresh_token")

        echo "Token refresh response received"

        # Extract new access token if successful
        NEW_ACCESS_TOKEN=$(echo "$REFRESH_RESPONSE" | jq -r '.access_token // empty')

        if [[ -n "$NEW_ACCESS_TOKEN" && "$NEW_ACCESS_TOKEN" != "null" ]]; then
          echo "‚úÖ Successfully refreshed access token"

          # Update the .clasprc.json with the new token
          python3 << EOF
        import json
        import os

        auth_file = os.path.expanduser('~/.clasprc.json')
        with open(auth_file, 'r') as f:
            auth_data = json.load(f)

        # Update with fresh token
        auth_data['token']['access_token'] = '$NEW_ACCESS_TOKEN'
        # Update expiry (new tokens typically last 1 hour)
        auth_data['token']['expiry_date'] = $(($(date +%s) * 1000 + 3600000))

        with open(auth_file, 'w') as f:
            json.dump(auth_data, f, indent=2)

        print("‚úÖ Updated .clasprc.json with fresh access token")
        EOF
        else
          echo "‚ö†Ô∏è Could not refresh access token, using original token"
        fi

        # Check clasp login status
        clasp login --status || echo "Login status check failed"

    - name: Push to Google Apps Script
      run: |
        echo "üöÄ Deploying to Apps Script..."
        echo "Script ID: ${{ secrets.SCRIPT_ID }}"

        # Try push with existing token first
        if clasp push --force; then
          echo "‚úÖ SUCCESS! Push completed with existing token!"
        else
          echo "‚ùå Initial push failed. Refreshing token and retrying..."

          # Get fresh access token using refresh token
          echo "üîÑ Getting fresh access token..."
          REFRESH_RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "refresh_token=${{ secrets.REFRESH_TOKEN }}" \
            -d "grant_type=refresh_token")

          # Extract the new access token
          NEW_ACCESS_TOKEN=$(echo "$REFRESH_RESPONSE" | jq -r '.access_token // empty')

          if [[ -n "$NEW_ACCESS_TOKEN" && "$NEW_ACCESS_TOKEN" != "null" ]]; then
            echo "‚úÖ Got fresh access token, updating .clasprc.json..."

            # Update .clasprc.json with the fresh token
            python3 << EOF
        import json
        import os

        auth_file = os.path.expanduser('~/.clasprc.json')
        with open(auth_file, 'r') as f:
            auth_data = json.load(f)

        # Update with fresh token and new expiry
        auth_data['token']['access_token'] = '$NEW_ACCESS_TOKEN'
        auth_data['token']['expiry_date'] = $(($(date +%s) * 1000 + 3600000))

        with open(auth_file, 'w') as f:
            json.dump(auth_data, f, indent=2)

        print("‚úÖ Updated .clasprc.json with fresh access token")
        EOF

            # Retry the push with fresh token
            echo "üîÑ Retrying push with fresh token..."
            if clasp push --force; then
              echo "‚úÖ SUCCESS! Push completed with fresh token!"
            else
              echo "‚ùå Push failed even with fresh token"
              echo "üîç Final debug - auth file structure:"
              python3 << 'EOF'
        import json
        import os
        try:
            with open(os.path.expanduser('~/.clasprc.json'), 'r') as f:
                data = json.load(f)
            token_data = data.get('token', {})
            oauth_settings = data.get('oauth2ClientSettings', {})
            print(f"Token length: {len(token_data.get('access_token', ''))}")
            print(f"Expiry: {token_data.get('expiry_date')}")
            print(f"Client ID present: {'clientId' in oauth_settings}")
            print(f"Structure: token={bool(token_data)}, oauth={bool(oauth_settings)}")
        except Exception as e:
            print(f"Error: {e}")
        EOF
              exit 1
            fi
          else
            echo "‚ùå Could not get fresh access token"
            echo "Token refresh response:"
            echo "$REFRESH_RESPONSE" | jq '.' || echo "$REFRESH_RESPONSE"
            exit 1
          fi
        fi

    - name: Create deployment (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
      run: |
        echo "üì¶ Creating deployment..."
        clasp deploy --description "Automated deployment - $(date '+%Y-%m-%d %H:%M:%S')" || echo "‚ö†Ô∏è Deployment failed but push succeeded"

    - name: Success notification
      if: success()
      run: |
        echo "üéâ DEPLOYMENT SUCCESSFUL!"
        echo "üìù Your Apps Script project has been updated"

    - name: Failure analysis
      if: failure()
      run: |
        echo "‚ùå Deployment failed"
        echo "üîç Most likely cause: Expired OAuth tokens"
        echo "üìñ Solution: Run 'clasp logout && clasp login' locally, then update GitHub secrets"