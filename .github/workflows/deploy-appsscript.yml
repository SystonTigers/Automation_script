name: Deploy to Google Apps Script

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install clasp
      run: npm install -g @google/clasp

    - name: Verify required secrets
      run: |
        echo "üîç Verifying secrets are present..."
        if [[ -z "${{ secrets.ACCESS_TOKEN }}" ]]; then echo "‚ùå ACCESS_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.REFRESH_TOKEN }}" ]]; then echo "‚ùå REFRESH_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_ID }}" ]]; then echo "‚ùå CLIENT_ID missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_SECRET }}" ]]; then echo "‚ùå CLIENT_SECRET missing"; exit 1; fi
        if [[ -z "${{ secrets.SCRIPT_ID }}" ]]; then echo "‚ùå SCRIPT_ID missing"; exit 1; fi
        echo "‚úÖ All required secrets are configured"

    - name: Create .clasprc.json using environment variables
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        ID_TOKEN: ${{ secrets.ID_TOKEN }}
      run: |
        echo "üîë Creating authentication file using environment variables..."

        # Calculate expiry date (current time + 1 hour in milliseconds)
        EXPIRY_DATE=$(($(date +%s) * 1000 + 3600000))

        # Use Python to create the JSON file safely
        python3 << EOF
        import json
        import os

        # Create the authentication structure
        auth_data = {
            "tokens": {
                "default": {
                    "client_id": os.environ.get('CLIENT_ID', ''),
                    "client_secret": os.environ.get('CLIENT_SECRET', ''),
                    "type": "authorized_user",
                    "refresh_token": os.environ.get('REFRESH_TOKEN', ''),
                    "access_token": os.environ.get('ACCESS_TOKEN', ''),
                    "token_type": "Bearer",
                    "expiry_date": int(os.environ.get('EXPIRY_DATE', '0')),
                    "id_token": os.environ.get('ID_TOKEN', '')
                }
            }
        }

        # Write to the authentication file
        with open(os.path.expanduser('~/.clasprc.json'), 'w') as f:
            json.dump(auth_data, f, indent=2)

        print("‚úÖ Authentication file created successfully")
        EOF

        # Set the expiry date for Python
        export EXPIRY_DATE=$EXPIRY_DATE

    - name: Verify authentication file
      run: |
        echo "üìã Verifying authentication file..."
        if [[ ! -f ~/.clasprc.json ]]; then
          echo "‚ùå Authentication file not created!"
          exit 1
        fi

        echo "‚úÖ Authentication file exists"
        echo "üìÑ File size: $(wc -c < ~/.clasprc.json) bytes"

        # Validate JSON structure
        if python3 -m json.tool ~/.clasprc.json > /dev/null 2>&1; then
          echo "‚úÖ Valid JSON structure"
        else
          echo "‚ùå Invalid JSON structure"
          exit 1
        fi

        # Show structure without secrets
        echo "üìÑ File structure (secrets masked):"
        python3 << 'EOF'
        import json
        with open('/home/runner/.clasprc.json', 'r') as f:
            data = json.load(f)

        # Mask sensitive data
        if 'tokens' in data and 'default' in data['tokens']:
            masked = data.copy()
            masked['tokens']['default']['client_secret'] = '***MASKED***'
            masked['tokens']['default']['access_token'] = '***MASKED***'
            masked['tokens']['default']['refresh_token'] = '***MASKED***'
            masked['tokens']['default']['id_token'] = '***MASKED***'
            print(json.dumps(masked, indent=2))
        EOF

    - name: Create .clasp.json with Script ID
      run: |
        echo "üìù Creating project configuration..."
        jq -n --arg script_id "${{ secrets.SCRIPT_ID }}" '{"scriptId": $script_id, "rootDir": "./src", "fileExtension": "gs"}' > .clasp.json
        echo "‚úÖ Project configuration created"
        cat .clasp.json

    - name: Test clasp authentication
      run: |
        echo "üîç Testing clasp authentication..."
        echo "Clasp version: $(clasp --version)"

        echo "Testing login status..."
        clasp login --status || echo "‚ö†Ô∏è Login status check failed - continuing"

        echo "Testing project list..."
        clasp list || echo "‚ö†Ô∏è Project list failed - continuing"

    - name: Push to Google Apps Script
      run: |
        echo "üöÄ Deploying to Apps Script..."
        echo "Script ID: ${{ secrets.SCRIPT_ID }}"
        echo "Root directory: ./src"

        if clasp push --force; then
          echo "‚úÖ Push completed successfully!"
        else
          echo "‚ùå Push failed!"
          echo "üîç Debug information:"
          echo "Authentication file exists: $(test -f ~/.clasprc.json && echo 'YES' || echo 'NO')"
          echo "Project file exists: $(test -f .clasp.json && echo 'YES' || echo 'NO')"
          echo "Final attempt - showing auth file structure:"
          cat ~/.clasprc.json | python3 -m json.tool || cat ~/.clasprc.json
          exit 1
        fi

    - name: Create deployment (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üì¶ Creating deployment..."
        clasp deploy --description "Automated deployment from GitHub Actions - $(date '+%Y-%m-%d %H:%M:%S')" || echo "‚ö†Ô∏è Deployment creation failed, but push succeeded"

    - name: Deployment success notification
      if: success()
      run: |
        echo "üéâ Successfully deployed to Google Apps Script!"
        echo "üìù Files have been pushed to your Apps Script project"

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîç Common solutions:"
        echo "   1. Verify GitHub secrets are up-to-date"
        echo "   2. Check that Apps Script API is enabled"
        echo "   3. Confirm Script ID is correct"