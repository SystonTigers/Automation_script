name: Deploy to Google Apps Script

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install clasp
      run: npm install -g @google/clasp

    - name: Verify required secrets
      run: |
        echo "🔍 Verifying secrets are present..."
        if [[ -z "${{ secrets.ACCESS_TOKEN }}" ]]; then echo "❌ ACCESS_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.REFRESH_TOKEN }}" ]]; then echo "❌ REFRESH_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_ID }}" ]]; then echo "❌ CLIENT_ID missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_SECRET }}" ]]; then echo "❌ CLIENT_SECRET missing"; exit 1; fi
        if [[ -z "${{ secrets.SCRIPT_ID }}" ]]; then echo "❌ SCRIPT_ID missing"; exit 1; fi
        echo "✅ All required secrets are configured"

    - name: Create .clasprc.json with exact local format
      run: |
        echo "🔑 Creating authentication file with exact local format..."

        # Calculate expiry date (current time + 1 hour in milliseconds)
        expiry_date=$(($(date +%s) * 1000 + 3600000))

        jq -n \
          --arg client_id "${{ secrets.CLIENT_ID }}" \
          --arg client_secret "${{ secrets.CLIENT_SECRET }}" \
          --arg refresh_token "${{ secrets.REFRESH_TOKEN }}" \
          --arg access_token "${{ secrets.ACCESS_TOKEN }}" \
          --arg id_token "${{ secrets.ID_TOKEN }}" \
          --argjson expiry_date "$expiry_date" \
          '{
            "tokens": {
              "default": {
                "client_id": $client_id,
                "client_secret": $client_secret,
                "type": "authorized_user",
                "refresh_token": $refresh_token,
                "access_token": $access_token,
                "token_type": "Bearer",
                "expiry_date": $expiry_date,
                "id_token": $id_token
              }
            }
          }' > ~/.clasprc.json
        echo "✅ Authentication file created with exact format match"

    - name: Verify authentication file format
      run: |
        echo "📋 Verifying authentication file format..."
        echo "📄 File structure (without secrets):"
        jq 'del(.tokens.default.client_secret, .tokens.default.access_token, .tokens.default.refresh_token, .tokens.default.id_token)' ~/.clasprc.json

    - name: Create .clasp.json with Script ID
      run: |
        echo "📝 Creating project configuration..."
        jq -n --arg script_id "${{ secrets.SCRIPT_ID }}" '{"scriptId": $script_id, "rootDir": "./src", "fileExtension": "gs"}' > .clasp.json
        echo "✅ Project configuration created"
        cat .clasp.json

    - name: Test clasp authentication
      run: |
        echo "🔍 Testing clasp authentication..."
        clasp login --status || echo "⚠️ Login status check failed - continuing with push"

    - name: Push to Google Apps Script
      run: |
        echo "🚀 Deploying to Apps Script..."
        echo "Using Script ID: ${{ secrets.SCRIPT_ID }}"

        if clasp push --force; then
          echo "✅ Push completed successfully!"
        else
          echo "❌ Push failed! Let's try to refresh the token..."
          # Try to list projects first to test auth
          clasp list || echo "❌ Could not list projects - auth issue confirmed"
          exit 1
        fi

    - name: Create deployment (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "📦 Creating deployment..."
        clasp deploy --description "Automated deployment from GitHub Actions - $(date '+%Y-%m-%d %H:%M:%S')" || echo "⚠️ Deployment creation failed, but push succeeded"

    - name: Deployment success notification
      if: success()
      run: |
        echo "🎉 Successfully deployed to Google Apps Script!"
        echo "📝 Changes in src/ folder have been pushed to Apps Script project"

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "🔍 The issue is likely expired OAuth tokens."
        echo "📖 To fix:"
        echo "   1. Run 'clasp login' locally"
        echo "   2. Extract new tokens from ~/.clasprc.json"
        echo "   3. Update all GitHub repository secrets with fresh tokens"