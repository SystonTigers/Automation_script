name: Deploy to Google Apps Script

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install clasp
        run: npm install -g @google/clasp

      - name: Verify required secrets
        run: |
          if [[ -z "${{ secrets.ACCESS_TOKEN }}" ]] || [[ -z "${{ secrets.REFRESH_TOKEN }}" ]] || [[ -z "${{ secrets.CLIENT_ID }}" ]] || [[ -z "${{ secrets.CLIENT_SECRET }}" ]] || [[ -z "${{ secrets.SCRIPT_ID }}" ]] || [[ -z "${{ secrets.ID_TOKEN }}" ]]; then
            echo "‚ùå Missing required secrets. Please check README-OAUTH-SETUP.md for setup instructions."
            echo "Required secrets: ACCESS_TOKEN, REFRESH_TOKEN, CLIENT_ID, CLIENT_SECRET, SCRIPT_ID, ID_TOKEN"
            exit 1
          else
            echo "‚úÖ All required secrets are configured"
          fi

      - name: Create .clasprc.json for authentication
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          ID_TOKEN: ${{ secrets.ID_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          OAUTH_SCOPE: ${{ secrets.OAUTH_SCOPE }}
          ACCESS_TOKEN_EXPIRY: ${{ secrets.ACCESS_TOKEN_EXPIRY }}
        run: |
          echo "üîë Creating authentication file with sanitized credentials..."
          python3 <<'PY'

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install clasp
      run: npm install -g @google/clasp

    - name: Verify required secrets
      run: |
        if [[ -z "${{ secrets.ACCESS_TOKEN }}" ]] || [[ -z "${{ secrets.REFRESH_TOKEN }}" ]] || [[ -z "${{ secrets.CLIENT_ID }}" ]] || [[ -z "${{ secrets.CLIENT_SECRET }}" ]] || [[ -z "${{ secrets.SCRIPT_ID }}" ]] || [[ -z "${{ secrets.ID_TOKEN }}" ]]; then
          echo "‚ùå Missing required secrets. Please check README-OAUTH-SETUP.md for setup instructions."
          echo "Required secrets: ACCESS_TOKEN, REFRESH_TOKEN, CLIENT_ID, CLIENT_SECRET, SCRIPT_ID, ID_TOKEN"
          exit 1
        else
          echo "‚úÖ All required secrets are configured"
        fi

    - name: Create .clasprc.json for authentication
      env:
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        ID_TOKEN: ${{ secrets.ID_TOKEN }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        OAUTH_SCOPE: ${{ secrets.OAUTH_SCOPE }}
        ACCESS_TOKEN_EXPIRY: ${{ secrets.ACCESS_TOKEN_EXPIRY }}
      run: |
        echo "üîë Creating authentication file with sanitized credentials..."
        python3 <<'PY'

import json
import os
from pathlib import Path


def sanitize_token(value: str) -> str:
    """Remove whitespace characters that can break HTTP headers."""
    if value is None:
        return ""
    # Preserve token contents while removing whitespace and line breaks
    return "".join(value.split())


def sanitize_field(value: str) -> str:
    if value is None:
        return ""
    return value.strip()


def parse_expiry(raw_value: str) -> int:
    raw_value = sanitize_field(raw_value)
    if not raw_value:
        return 0
    try:
        return int(raw_value)
    except ValueError:
        return 0


scope = sanitize_field(os.environ.get("OAUTH_SCOPE", ""))
if not scope:
    scope = "https://www.googleapis.com/auth/script.projects"

config = {
    "token": {
        "access_token": sanitize_token(os.environ.get("ACCESS_TOKEN")),
        "refresh_token": sanitize_token(os.environ.get("REFRESH_TOKEN")),
        "scope": scope,
        "token_type": "Bearer",
        "id_token": sanitize_token(os.environ.get("ID_TOKEN")),
        "expiry_date": parse_expiry(os.environ.get("ACCESS_TOKEN_EXPIRY")),
    },
    "oauth2ClientSettings": {
        "clientId": sanitize_field(os.environ.get("CLIENT_ID")),
        "clientSecret": sanitize_field(os.environ.get("CLIENT_SECRET")),
        "redirectUri": "http://localhost",
    },
    "isLocalCreds": False,
}

Path(os.path.expanduser("~/.clasprc.json")).write_text(
    json.dumps(config, indent=2),
    encoding="utf-8",
)
PY
          echo "‚úÖ Authentication file created with sanitized values"

      - name: Verify authentication file
        run: |
          echo "üìã Checking authentication setup..."
          ls -la ~/.clasprc.json
          echo "üìÑ File structure verification:"
          jq 'del(.token.access_token, .token.refresh_token, .token.id_token, .oauth2ClientSettings.clientSecret)' ~/.clasprc.json

      - name: Create .clasp.json with Script ID
        env:
          SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
        run: |
          echo "üìù Creating project configuration..."
          python3 <<'PY'

        echo "‚úÖ Authentication file created with sanitized values"

    - name: Verify authentication file
      run: |
        echo "üìã Checking authentication setup..."
        ls -la ~/.clasprc.json
        echo "üìÑ File structure verification:"
        jq 'del(.token.access_token, .token.refresh_token, .token.id_token, .oauth2ClientSettings.clientSecret)' ~/.clasprc.json

    - name: Create .clasp.json with Script ID
      env:
        SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
      run: |
        echo "üìù Creating project configuration..."
        python3 <<'PY'

import json
import os

script_id = "".join(os.environ.get("SCRIPT_ID", "").split())

config = {
    "scriptId": script_id,
    "rootDir": "./src",
    "fileExtension": "gs",
}

with open(".clasp.json", "w", encoding="utf-8") as fh:
    json.dump(config, fh, indent=2)
PY
          echo "‚úÖ Project configuration created"
          cat .clasp.json

      - name: Test clasp login status
        run: |
          echo "üîç Testing clasp authentication..."
          clasp login --status || echo "Login status check completed - proceeding with push"

      - name: Push to Google Apps Script
        run: |
          echo "üöÄ Deploying to Apps Script..."
          clasp push --force
          echo "‚úÖ Push completed successfully"

      - name: Create deployment (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üì¶ Creating deployment..."
          clasp deploy --description "Automated deployment from GitHub Actions - $(date '+%Y-%m-%d %H:%M:%S')"
          echo "‚úÖ Deployment created successfully"

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ Successfully deployed to Google Apps Script!"
          echo "üìù Changes in src/ folder have been pushed to Apps Script project"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "üì¶ A new deployment was also created"
          fi

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs above for details"
          echo "üìñ Refer to TROUBLESHOOTING.md for common solutions"
          echo "üè† Authentication file location: ~/.clasprc.json"
          echo "üìÅ Project file location: .clasp.json"
          echo "üîß Try running 'clasp login' locally to regenerate tokens if needed"

        echo "‚úÖ Project configuration created"
        cat .clasp.json

    - name: Test clasp login status
      run: |
        echo "üîç Testing clasp authentication..."
        clasp login --status || echo "Login status check completed - proceeding with push"

    - name: Push to Google Apps Script
      run: |
        echo "üöÄ Deploying to Apps Script..."
        clasp push --force
        echo "‚úÖ Push completed successfully"

    - name: Create deployment (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üì¶ Creating deployment..."
        clasp deploy --description "Automated deployment from GitHub Actions - $(date '+%Y-%m-%d %H:%M:%S')"
        echo "‚úÖ Deployment created successfully"

    - name: Deployment success notification
      if: success()
      run: |
        echo "üéâ Successfully deployed to Google Apps Script!"
        echo "üìù Changes in src/ folder have been pushed to Apps Script project"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "üì¶ A new deployment was also created"
        fi

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîç Check the logs above for details"
        echo "üìñ Refer to TROUBLESHOOTING.md for common solutions"
        echo "üè† Authentication file location: ~/.clasprc.json"
        echo "üìÅ Project file location: .clasp.json"
        echo "üîß Try running 'clasp login' locally to regenerate tokens if needed"
