name: Deploy to Google Apps Script

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install clasp
      run: npm install -g @google/clasp

    - name: Verify required secrets
      run: |
        echo "🔍 Verifying secrets are present..."
        if [[ -z "${{ secrets.ACCESS_TOKEN }}" ]]; then echo "❌ ACCESS_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.REFRESH_TOKEN }}" ]]; then echo "❌ REFRESH_TOKEN missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_ID }}" ]]; then echo "❌ CLIENT_ID missing"; exit 1; fi
        if [[ -z "${{ secrets.CLIENT_SECRET }}" ]]; then echo "❌ CLIENT_SECRET missing"; exit 1; fi
        if [[ -z "${{ secrets.SCRIPT_ID }}" ]]; then echo "❌ SCRIPT_ID missing"; exit 1; fi
        echo "✅ All required secrets are configured"

    - name: Create .clasprc.json with EXACT working format
      run: |
        echo "🔑 Creating authentication file..."

        # Create the file with the exact format that works locally
        cat > ~/.clasprc.json << 'EOF'
        {
          "tokens": {
            "default": {
              "client_id": "CLIENT_ID_PLACEHOLDER",
              "client_secret": "CLIENT_SECRET_PLACEHOLDER",
              "type": "authorized_user",
              "refresh_token": "REFRESH_TOKEN_PLACEHOLDER",
              "access_token": "ACCESS_TOKEN_PLACEHOLDER",
              "token_type": "Bearer",
              "expiry_date": EXPIRY_DATE_PLACEHOLDER,
              "id_token": "ID_TOKEN_PLACEHOLDER"
            }
          }
        }
        EOF

        # Replace placeholders with actual values
        sed -i "s/CLIENT_ID_PLACEHOLDER/${{ secrets.CLIENT_ID }}/g" ~/.clasprc.json
        sed -i "s/CLIENT_SECRET_PLACEHOLDER/${{ secrets.CLIENT_SECRET }}/g" ~/.clasprc.json
        sed -i "s/REFRESH_TOKEN_PLACEHOLDER/${{ secrets.REFRESH_TOKEN }}/g" ~/.clasprc.json
        sed -i "s/ACCESS_TOKEN_PLACEHOLDER/${{ secrets.ACCESS_TOKEN }}/g" ~/.clasprc.json
        sed -i "s/ID_TOKEN_PLACEHOLDER/${{ secrets.ID_TOKEN }}/g" ~/.clasprc.json

        # Set expiry date to 1 hour from now
        expiry_date=$(($(date +%s) * 1000 + 3600000))
        sed -i "s/EXPIRY_DATE_PLACEHOLDER/$expiry_date/g" ~/.clasprc.json

        echo "✅ Authentication file created"

    - name: DEBUG - Show authentication file structure
      run: |
        echo "🔍 DEBUG: Authentication file contents:"
        echo "File exists: $(test -f ~/.clasprc.json && echo 'YES' || echo 'NO')"
        echo "File size: $(wc -c < ~/.clasprc.json) bytes"
        echo "First few lines:"
        head -10 ~/.clasprc.json
        echo "Structure with jq (masking secrets):"
        jq 'del(.tokens.default.client_secret, .tokens.default.access_token, .tokens.default.refresh_token, .tokens.default.id_token)' ~/.clasprc.json || echo "jq parsing failed"
        echo "Raw file validation:"
        python3 -m json.tool ~/.clasprc.json > /dev/null && echo "✅ Valid JSON" || echo "❌ Invalid JSON"

    - name: Create .clasp.json with Script ID
      run: |
        echo "📝 Creating project configuration..."
        jq -n --arg script_id "${{ secrets.SCRIPT_ID }}" '{"scriptId": $script_id, "rootDir": "./src", "fileExtension": "gs"}' > .clasp.json
        echo "✅ Project configuration created"
        cat .clasp.json

    - name: Test clasp with debug output
      run: |
        echo "🔍 Testing clasp with debug..."
        echo "Clasp version:"
        clasp --version
        echo "Current directory:"
        pwd
        echo "Files in home directory:"
        ls -la ~/
        echo "Attempting to test authentication..."

        # Try login status first
        echo "Login status check:"
        clasp login --status || echo "Login status failed"

        # Try listing projects
        echo "Trying to list projects:"
        clasp list || echo "List projects failed"

    - name: Push to Google Apps Script
      run: |
        echo "🚀 Attempting deployment..."

        if clasp push --force; then
          echo "✅ Push completed successfully!"
        else
          echo "❌ Push failed!"
          echo "🔍 Final debug attempt:"
          echo "Authentication file structure:"
          cat ~/.clasprc.json | jq '.' || cat ~/.clasprc.json
          exit 1
        fi

    - name: Create deployment (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "📦 Creating deployment..."
        clasp deploy --description "Automated deployment from GitHub Actions - $(date '+%Y-%m-%d %H:%M:%S')" || echo "⚠️ Deployment creation failed, but push succeeded"

    - name: Deployment success notification
      if: success()
      run: |
        echo "🎉 Successfully deployed to Google Apps Script!"

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "❌ Deployment failed - authentication issues persist"
        echo "🔍 Next steps:"
        echo "   1. Verify all GitHub secrets are exactly correct"
        echo "   2. Check if tokens have expired"
        echo "   3. Try re-running 'clasp login' locally and updating secrets"