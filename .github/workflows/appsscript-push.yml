name: Push to Apps Script

on:
  push:
    branches: [ "main" ]

# Removed concurrency to avoid queue delays

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install clasp
        run: npm install -g @google/clasp

      - name: Configure clasp auth
        env:
          CLASPRC_JSON: ${{ secrets.CLASPRC_JSON }}
        run: |
          echo "🔐 Configuring clasp authentication..."

          if [ -z "$CLASPRC_JSON" ]; then
            echo "❌ ERROR: CLASPRC_JSON secret is missing"
            exit 1
          fi

          echo "✅ CLASPRC_JSON secret found (${#CLASPRC_JSON} chars)"

          # Use base64 encoding to avoid GitHub's secret masking interference
          echo "$CLASPRC_JSON" | base64 -d > ~/.clasprc.json 2>/dev/null || {
            echo "🔄 Secret not base64-encoded, using direct method..."
            # Create file using printf to avoid echo interpretation issues
            printf '%s' "$CLASPRC_JSON" > ~/.clasprc.json
          }

          if [ ! -f ~/.clasprc.json ]; then
            echo "❌ ERROR: Failed to create .clasprc.json"
            exit 1
          fi

          echo "📋 File size: $(wc -c < ~/.clasprc.json) bytes"
          echo "📋 File lines: $(wc -l < ~/.clasprc.json) lines"

          # Check for GitHub's secret masking (*** characters)
          if grep -q '\*\*\*' ~/.clasprc.json; then
            echo "❌ ERROR: GitHub secret masking detected in .clasprc.json"
            echo "The secret contains *** characters which indicates GitHub is masking sensitive content"
            echo "Try encoding the secret as base64 in GitHub secrets"
            exit 1
          fi

          # Validate JSON without showing content
          if ! jq empty ~/.clasprc.json 2>/dev/null; then
            echo "❌ ERROR: Invalid JSON in .clasprc.json"
            echo "JSON validation failed - checking for common issues..."

            # Check if file is empty
            if [ ! -s ~/.clasprc.json ]; then
              echo "File is empty"
            else
              echo "File contains $(wc -c < ~/.clasprc.json) characters"
              echo "Checking for non-printable characters..."
              if file ~/.clasprc.json | grep -q "text"; then
                echo "File appears to be text"
              else
                echo "File may contain binary data"
              fi
            fi
            exit 1
          fi

          # Check if this is the new format (tokens.default) or old format (token)
          if jq -e '.tokens.default' ~/.clasprc.json >/dev/null 2>&1; then
            echo "✅ Detected new clasp format (tokens.default)"

            # Verify required fields in new format
            if ! jq -e '.tokens.default.refresh_token' ~/.clasprc.json >/dev/null 2>&1; then
              echo "❌ ERROR: Missing refresh_token in new format"
              exit 1
            fi

            if ! jq -e '.tokens.default.client_id' ~/.clasprc.json >/dev/null 2>&1; then
              echo "❌ ERROR: Missing client_id in new format"
              exit 1
            fi

          elif jq -e '.token' ~/.clasprc.json >/dev/null 2>&1; then
            echo "✅ Detected old clasp format (token)"

            # Verify required fields in old format
            if ! jq -e '.token.refresh_token' ~/.clasprc.json >/dev/null 2>&1; then
              echo "❌ ERROR: Missing refresh_token in old format"
              exit 1
            fi

          else
            echo "❌ ERROR: Unknown .clasprc.json format"
            echo "Expected either 'tokens.default' or 'token' object"
            exit 1
          fi

          echo "✅ Auth file created and validated successfully"

      - name: Verify clasp login
        run: |
          echo "🔍 Verifying clasp authentication..."

          # Try clasp login status with detailed error output
          if ! clasp login --status 2>&1; then
            echo "❌ Clasp login --status failed"
            echo "Checking if we can get user info instead..."

            # Try alternative verification
            if ! clasp me 2>&1; then
              echo "❌ Clasp 'me' command also failed"
              echo "🔧 Trying to check .clasprc.json file permissions..."
              ls -la ~/.clasprc.json
              echo "🔧 Checking clasp version..."
              clasp --version
              exit 1
            fi
          fi

          echo "✅ Clasp authentication verified"

      - name: Deploy to Apps Script
        run: |
          echo "🚀 Deploying to Google Apps Script..."

          echo "📋 Checking clasp status..."
          clasp status

          echo "📤 Pushing files..."
          clasp push --force

          echo "✅ Code deployment completed successfully!"

      - name: Manage single web app deployment
        env:
          WEBAPP_DEPLOYMENT_ID: ${{ vars.WEBAPP_DEPLOYMENT_ID }}
        run: |
          echo "🔄 Managing single web app deployment..."

          # Create a version label for tracking
          npx clasp version "prod-${{ github.ref_name }} @ ${{ github.sha }}"

          # Use our single deployment script (with error handling)
          if [ -f "./scripts/update-single-deployment.js" ]; then
            echo "✅ Found deployment script, executing..."
            node ./scripts/update-single-deployment.js
          else
            echo "⚠️ Deployment script not found, using fallback deployment..."
            # Fallback: simple deployment
            npx clasp deploy --description "Fallback deployment $(date)"
          fi