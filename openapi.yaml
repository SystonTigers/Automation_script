openapi: 3.1.0
info:
  title: Syston Post Bus API
  version: 1.0.0
  description: >-
    Serverless backend running on Cloudflare Workers that powers the Syston Post Bus,
    orchestrating attendance, votes, fixtures, live streams, and social media job
    dispatching through Workers Queues.
servers:
  - url: https://syston-postbus.example.com
    description: Production Cloudflare Worker
  - url: https://syston-postbus-dev.example.com
    description: Preview deployment
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          nullable: true
        error:
          nullable: true
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              nullable: true
      required:
        - success
    AttendanceRequest:
      type: object
      required:
        - matchId
        - playerId
        - attendedAt
      properties:
        matchId:
          type: string
        playerId:
          type: string
        attendedAt:
          type: string
          format: date-time
    VoteRequest:
      type: object
      required:
        - matchId
        - candidateId
      properties:
        matchId:
          type: string
        candidateId:
          type: string
    PostRequest:
      type: object
      required:
        - tenant
        - template
        - channels
        - data
      properties:
        tenant:
          type: string
        template:
          type: string
        channels:
          type: array
          items:
            type: string
            enum: [fb, ig, yt, tt, make]
        data:
          type: object
          additionalProperties: true
    StreamScheduleRequest:
      type: object
      required:
        - matchId
        - platform
        - scheduledFor
      properties:
        matchId:
          type: string
        platform:
          type: string
          enum: [fb, ig, yt, tt, make]
        scheduledFor:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
    StreamInfo:
      type: object
      required:
        - matchId
        - status
        - platform
      properties:
        matchId:
          type: string
        status:
          type: string
          enum: [scheduled, live, ended]
        platform:
          type: string
        url:
          type: string
          nullable: true
        scheduledFor:
          type: string
          format: date-time
          nullable: true
    VoteTally:
      type: array
      items:
        type: object
        required:
          - candidateId
          - votes
        properties:
          candidateId:
            type: string
          votes:
            type: integer
            minimum: 0
    Fixtures:
      type: array
      items:
        type: object
        required:
          - id
          - opponent
          - competition
          - kickoff
          - venue
        properties:
          id:
            type: string
          opponent:
            type: string
          competition:
            type: string
          kickoff:
            type: string
            format: date-time
          venue:
            type: string
    LeagueTable:
      type: object
      properties:
        updatedAt:
          type: string
          format: date-time
        standings:
          type: array
          items:
            type: object
            properties:
              team:
                type: string
              played:
                type: integer
              points:
                type: integer
    LocaleBundle:
      type: object
      properties:
        locale:
          type: string
        messages:
          type: object
          additionalProperties:
            type: string
paths:
  /healthz:
    get:
      summary: Health probe
      description: Returns worker uptime metadata for monitoring.
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ok:
                            type: boolean
                          version:
                            type: string
  /api/v1/events:
    get:
      summary: List fixtures
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Fixture payload
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
            X-RateLimit-Remaining:
              schema:
                type: string
            X-RateLimit-Reset:
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          events:
                            $ref: '#/components/schemas/Fixtures'
  /api/v1/attendance:
    post:
      summary: Record attendance
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceRequest'
      responses:
        '200':
          description: Attendance stored
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
            X-RateLimit-Remaining:
              schema:
                type: string
            X-RateLimit-Reset:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/votes:
    post:
      summary: Submit a vote
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteRequest'
      responses:
        '200':
          description: Vote accepted
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
            X-RateLimit-Remaining:
              schema:
                type: string
            X-RateLimit-Reset:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/votes/tally:
    get:
      summary: Retrieve vote tally
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: matchId
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Vote counts
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
            X-RateLimit-Remaining:
              schema:
                type: string
            X-RateLimit-Reset:
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tally:
                            $ref: '#/components/schemas/VoteTally'
  /api/v1/streams/{matchId}:
    get:
      summary: Get stream metadata
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream info
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/StreamInfo'
        '404':
          description: Stream not found
  /api/v1/streams/schedule:
    post:
      summary: Schedule a stream
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamScheduleRequest'
      responses:
        '201':
          description: Stream scheduled
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
            X-RateLimit-Remaining:
              schema:
                type: string
            X-RateLimit-Reset:
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/StreamInfo'
  /api/v1/post:
    post:
      summary: Enqueue social post job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '202':
          description: Job queued
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
            X-RateLimit-Remaining:
              schema:
                type: string
            X-RateLimit-Reset:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/table:
    get:
      summary: Retrieve league table
      security:
        - bearerAuth: []
      responses:
        '200':
          description: League standings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LeagueTable'
  /i18n/{locale}.json:
    get:
      summary: Download locale bundle
      parameters:
        - in: path
          name: locale
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Locale bundle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleBundle'
security:
  - bearerAuth: []
